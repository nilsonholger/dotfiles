import XMonad
import XMonad.Config.Desktop (desktopLayoutModifiers)
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.SetWMName
import XMonad.Layout.NoBorders
import XMonad.Util.EZConfig (additionalKeys)
import XMonad.Util.Run (spawnPipe)
import Graphics.X11.ExtraTypes.XF86
import System.Exit
import System.IO

import qualified XMonad.StackSet as W
import qualified Data.Map        as M

spaces = ["L","M","R","X"]

main = do
    xmobar <- spawnPipe "xmobar -x 1 ~/.xmonad/xmobar.hs"
    xmonad $ docks defaultConfig
        {
            terminal = "/usr/bin/gnome-terminal",
            modMask = mod4Mask,
            borderWidth = 1,
            normalBorderColor = "#002200",
            focusedBorderColor = "#005500",
            workspaces = spaces,
            layoutHook = smartBorders $ avoidStruts (Tall 1 (3/100) (1/2) ||| Mirror (Tall 1 (3/100) (1/2)) ||| Full),
            manageHook = composeAll
                [ manageHook defaultConfig
                , className =? "Blender" --> doFloat
                , className =? "Gimp" --> doFloat
                , className =? "Firefox" --> doShift "L"
                , className =? "MPlayer" --> doFloat
                , className =? "Thunderbird" --> doShift "R"
                , className =? "VirtualBox" --> doFloat
                , resource  =? "desktop_window" --> doIgnore ]
                <+> manageDocks,
            logHook = dynamicLogWithPP $ xmobarPP
                {
                    ppOutput = hPutStrLn xmobar
                    , ppOrder = \(ws:l:t:_) -> [ws,t]
                    , ppTitle = xmobarColor "green" "" . shorten 50
                },
            startupHook = do
                setWMName "LG3D"
                spawn "[ -f ~/.xmonad/background.jpg ] && display -window root ~/.xmonad/background.jpg"
                spawn "unity-settings-daemon"
                spawn "gnome-screensaver"
                spawn "xset +dpms dpms 1800 1800 1800"
        }
        `additionalKeys`
        [((m .|. mod4Mask, k), windows $ f i)
            | (i, k) <- zip (spaces) [xK_ampersand, xK_bracketleft, xK_braceleft, xK_braceright]
            , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
        `additionalKeys`
        [((m .|. mod4Mask, k), screenWorkspace s >>= flip whenJust (windows . f))
            | (k, s) <- zip [xK_w, xK_e, xK_r] [0,1,2]
            , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
        `additionalKeys` [
            ((mod4Mask               , xK_p        ), spawn "PATH=\"$HOME/local/bin:$PATH\" dmenu_run"  ),
            ((mod4Mask               , xK_q        ), spawn "xmonad --recompile && xmonad --restart&"),
            ((mod4Mask.|.shiftMask   , xK_q        ), io (exitWith ExitSuccess)),
            ((mod4Mask               , xK_Escape   ), spawn "display ~/.xmonad/Xmbindings.svg &"),
            ((mod4Mask.|.shiftMask   , xK_i        ), spawn "firefox &"),
            ((mod4Mask.|.shiftMask   , xK_m        ), spawn "thunderbird &"),
            ((controlMask.|.shiftMask, xF86XK_Eject), spawn "dm-tool lock"),
            ((controlMask.|.shiftMask, xK_l        ), spawn "if [ ! \"`setxkbmap -query | grep -o dvp,,nodeadkeys`\" = \"dvp,,nodeadkeys\" ]; then setxkbmap -layout us,us,de -variant dvp,,nodeadkeys -option lv3:ralt_switch; else setxkbmap -layout us_intl -option grp:shifts_toggle; fi; xmodmap ~/.Xmodmap &")]
        `additionalKeys` [
            ((0, xF86XK_AudioMute       ), spawn "amixer -q -D pulse set Master toggle"),
            ((0, xF86XK_AudioLowerVolume), spawn "amixer -q set Master 2-"),
            ((0, xF86XK_AudioRaiseVolume), spawn "amixer -q set Master 2+")]
