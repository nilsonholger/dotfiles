import XMonad
import XMonad.Config.Desktop (desktopLayoutModifiers)
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.SetWMName
import XMonad.Layout.NoBorders
import XMonad.Util.EZConfig (additionalKeys)
import XMonad.Util.Run (spawnPipe)
import Graphics.X11.ExtraTypes.XF86
import System.Exit
import System.IO

import qualified XMonad.StackSet as W
import qualified Data.Map        as M

spaces = ["1","2","3","4"]
dvorak_command = "setxkbmap -model pc104 -layout us,us,de -variant dvp,,nodeadkeys -option lv3:ralt_switch"
xlock_command = "gnome-screensaver-command --lock; xset +dpms dpms 1800 1800 1800"
osd_cat_command = "osd_cat --pos=top --offset=2 --align=center --font='-misc-fixed-*-*-*-*-10-*-*-*-c-*-*-*' --colour=green --shadow=5 --barmode=percentage "
audio_mute_command = "[[ $(amixer get Master) =~ off ]]\
                      \ && (for c in Master Headphone Speaker; do amixer -q set ${c} unmute; done)\
                      \ || (for c in Master Headphone Speaker; do amixer -q set ${c} mute; done)"

main = do
    xmobar <- spawnPipe "xmobar -x 0 ~/.xmonad/xmobar.hs"
    xmonad $ docks defaultConfig
        {
            terminal = "/usr/bin/gnome-terminal",
            modMask = mod4Mask,
            borderWidth = 1,
            normalBorderColor = "#002200",
            focusedBorderColor = "#005500",
            workspaces = spaces,
            layoutHook = smartBorders $ avoidStruts (Tall 1 (3/100) (1/2) ||| Mirror (Tall 1 (3/100) (1/2)) ||| Full),
            manageHook = composeAll
                [ manageHook defaultConfig
                , className =? "Blender" --> doFloat
                , className =? "Gimp" --> doFloat
                , className =? "Gnome-control-center" --> doFloat
                , className =? "Firefox" --> doShift "3"
                , (className =? "Firefox" <&&> appName =? "Toolkit" ) --> doFloat
                , className =? "MPlayer" --> doFloat
                , className =? "Pidgin" --> doShift "4"
                , className =? "VirtualBox" --> doFloat
                , className =? "Wfica" --> doShift "4"
                , resource  =? "desktop_window" --> doIgnore ]
                <+> manageDocks,
            logHook = dynamicLogWithPP $ xmobarPP
                {
                    ppOutput = hPutStrLn xmobar
                    , ppOrder = \(ws:l:t:_) -> [ws,t]
                    , ppTitle = xmobarColor "green" "" . shorten 50
                },
            startupHook = do
                setWMName "LG3D"
                spawn "[ -f ~/.xmonad/background.jpg ] && display -window root ~/.xmonad/background.jpg"
                spawn "unity-settings-daemon"
                spawn "gnome-screensaver"
                spawn ("xautolock -time 31 -locker '" ++ xlock_command ++ "'")
                spawn "sleep 1; xset +dpms dpms 1800 1800 1800"
                spawn dvorak_command
        }
        `additionalKeys`
        [((m .|. mod4Mask, k), windows $ f i)
            | (i, k) <- zip (spaces) [xK_ampersand, xK_bracketleft, xK_braceleft, xK_braceright]
            , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
        `additionalKeys`
        [((m .|. mod4Mask, k), screenWorkspace s >>= flip whenJust (windows . f))
            | (k, s) <- zip [xK_w, xK_e, xK_r] [0,1,2]
            , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
        `additionalKeys` [
            ((mod4Mask               , xK_p        ), spawn "PATH=\"$HOME/local/bin:$PATH\" dmenu_run"  ),
            ((mod4Mask               , xK_q        ), spawn "xmonad --recompile && xmonad --restart&"),
            ((mod4Mask.|.shiftMask   , xK_q        ), io (exitWith ExitSuccess)),
            ((mod4Mask               , xK_Escape   ), spawn "display ~/.xmonad/Xmbindings.svg &"),
            ((mod4Mask.|.shiftMask   , xK_l        ), spawn xlock_command),
            ((mod4Mask.|.shiftMask   , xF86XK_Eject), spawn "systemctl suspend"),
            ((controlMask.|.shiftMask, xF86XK_Eject), spawn xlock_command),
            ((controlMask.|.shiftMask, xK_l        ), spawn ("if [ ! \"`setxkbmap -query | grep -o dvp`\" = \"dvp\" ]; then " ++ dvorak_command ++ "; else setxkbmap -layout us_intl -option grp:shifts_toggle; fi; xmodmap ~/.Xmodmap &"))]
        `additionalKeys` [
            ((0, xF86XK_AudioMute        ), spawn audio_mute_command),
            ((0, xF86XK_AudioLowerVolume ), spawn ("amixer -q set Master 2-; pkill -u $USER osd_cat;" ++ osd_cat_command ++ "--percentage=`amixer get Master | awk -F'[' '/Mono:/ { print $2;}'`")),
            ((0, xF86XK_AudioRaiseVolume ), spawn ("amixer -q set Master 2+; pkill -u $USER osd_cat;" ++ osd_cat_command ++ "--percentage=`amixer get Master | awk -F'[' '/Mono:/ { print $2;}'`")),
            ((0, xF86XK_AudioMicMute     ), spawn "amixer -q set Capture toggle"),
            ((0, xF86XK_MonBrightnessDown), spawn ("xbacklight -5; pkill -u $USER osd_cat;" ++ osd_cat_command ++ "--percentage=`xbacklight`")),
            ((0, xF86XK_MonBrightnessUp  ), spawn ("xbacklight +5; pkill -u $USER osd_cat;" ++ osd_cat_command ++ "--percentage=`xbacklight`")),
            ((0, xF86XK_Display          ), spawn ""),
            ((0, xF86XK_WLAN             ), spawn "STATE=\"un`rfkill -no soft list wlan`\"; rkill ${STATE#unun} wlan"),
            ((0, xF86XK_Tools            ), spawn "env XDG_CURRENT_DESKTOP=GNOME gnome-control-center"),
            ((0, xF86XK_Bluetooth        ), spawn "STATE=\"un`rfkill -no soft list bluetooth`\"; rkill ${STATE#unun} bluetooth")]
