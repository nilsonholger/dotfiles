# prompt

### battery status
_BATTERY_STATUS=''

# battery status prompt
function _battery_status {
local _CHARGE=$1 _INDICATOR _STATE=$2 _TIME=$3
[[ ${_CHARGE} -gt  0 ]] && _COLOR="%F{red}"    # critical
[[ ${_CHARGE} -gt 20 ]] && _COLOR="%F{yellow}" # warning
[[ ${_CHARGE} -gt 40 ]] && _COLOR="%F{green}"  # ok
[ "${_STATE}" = "charging;" ] && _COLOR="%F{cyan}" # charging
for ((i=0; i<_CHARGE/20; i++)); do _INDICATOR+='❚'; done # for every 20%
[[ $((_CHARGE%20)) -ge 10 ]] && _INDICATOR+='❙' # for 10%-20% (after mod 20)
for ((i=${#_INDICATOR}; i<5; i++)); do _INDICATOR+=' '; done # fill
_BATTERY_STATUS="${_COLOR}${_TIME}⦗${_INDICATOR}⦘%f " # create prompt indicator
}

# architectures
function _unix_battery_status {
_BATTERY_STATUS=''
local _SYS='/sys/class/power_supply/BAT1/'
local _STATUS=`cat $_SYS/status` _TIME
[[ ! $_STATUS =~ (Disc|C)harging ]] && return
_TIME=$((`cat $_SYS/energy_now`*60/`cat $_SYS/power_now`))
_battery_status `cat $_SYS/capacity` $_STATUS $_TIME "`printf "%d:%.2d" $((_TIME/60)) $((_TIME%60))`"
}

function _osx_battery_status {
_BATTERY_STATUS=''
local -a _STATUS
_STATUS=(`pmset -g batt | tail -n +2`) # get info from pmset
[[ "${_STATUS[3]}" =~ .*charging.* ]] || return # only continue when (dis-)charging
_battery_status ${_STATUS[2]/\%;} ${_STATUS[3]} ${_STATUS[4]/\(no}
}

# update periodically
[ -d /sys/class/power_supply/BAT1 ] && periodic_functions+=(_unix_battery_status) # (=> unix/linux)
hash pmset 2> /dev/null && periodic_functions+=(_osx_battery_status) # (=> apple/OSX)



### git status
_GIT_STATUS=''

function _git_status {
local _TMP _DIR _BRANCH _BRANCH_STATE
_GIT_STATUS=''
[[ $(df -T $PWD | awk 'NR>1 {if ($1 ~ ":") print $2}') =~ sshfs ]] && return
_TMP=$(git status -s -b 2>&1) || return && _DIR=$(basename "`git rev-parse --show-toplevel`")
local _STASH=`git stash list | wc -l | tr -d ' '`
[[ $_TMP =~ [MADRCU].\ [^\(] ]] && _GIT_STATUS+="%F{green}#" # staged
[[ $_TMP =~ .[MADUT]\ [^\ \(] ]] && _GIT_STATUS+="%F{yellow}#" # unstaged
[[ $_TMP =~ \\?\\? ]] && _GIT_STATUS+="%F{red}#" # untracked
[[ $_TMP =~ ahead ]] && _GIT_STATUS+="%F{green}@${${_TMP/*ahead }/[,\]]*}" # ahead of remote
[ $_STASH -ne 0 ] && _GIT_STATUS+="%F{yellow}@$_STASH" # stashed
[[ $_TMP =~ behind ]] && _GIT_STATUS+="%F{red}@${${_TMP/*behind }/\]*}" # behind remote
_BRANCH="${(R)${(fR)_TMP/\#\# }/( *|...*)}" # branch
if [ $_BRANCH = "HEAD" ]
then
	_BRANCH=$(git status 2>&1) # non regular branch
	[[ $_BRANCH =~ " rebas" ]] && _BRANCH="REBASE" # rebase
	[[ $_BRANCH =~ " detached" ]] && _BRANCH="DETACHED" # detached
	_BRANCH_STATE="HEAD"
else
	_BRANCH_STATE="OK"
fi
[ $_BRANCH_STATE = "HEAD" -o ! -z $_GIT_STATUS ] && _GIT_STATUS="%F{cyan}$_DIR:$_BRANCH$_GIT_STATUS%f "
}

function precmd {
[[ $(fc -l -n -1) =~ (git|vi|fg) ]] && _git_status
}

function chpwd {
_git_status
}



### prompts
PROMPT=''
[ -n "$SSH_TTY" ] && PROMPT+='%F{red}%m ' # host if not local
PROMPT+='$_GIT_STATUS' # git prompt
PROMPT+='%F{green}%.' # pwd
PROMPT+='%(?..%F{red}%B[%?]%b)' # return code
PROMPT+='%F{yellow}%#%(2L.%B+%b.)' # shell status
PROMPT+='%(1j.%F{yellow}[%j].)' # background jobs
PROMPT+=' %f' # reset colors

RPROMPT='$_BATTERY_STATUS%F{cyan}%T%f' # battery status and time
LISTPROMPT=''
SPROMPT="%F{yellow}%R %F{white}%b-> %F{green}%r %F{white}%b? [aeNy]%f "
