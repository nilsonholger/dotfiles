# functions

# coffee/cafe break
function cafe {
while true
do
	dd if=/dev/urandom bs=1024 count=128 2>/dev/null
	sleep 0.3
done | (hexdump -e '"%08_ax  " 8/1 "%02x " "  " 8/1 "%02x " "  " 8/1 "%02x " "  " 8/1 "%02x " "  " 8/1 "%02x " "  " 8/1 "%02x " "  |" 48/1 "%_p" "|\n"' | grep --color=always -E "ca f(f e)?e")
}



# files [DIR] [DEPTH]
function files {
[ -z $1 ] && _DIR='.' || _DIR="$1"
[ -z $2 ] && _DEPTH="2" || _DEPTH="$2"
find $_DIR -maxdepth $_DEPTH -type d | while read _DIR
do
	echo `find $_DIR -type f | wc -l`\|$_DIR
done | sort -n | column -t -s"|"
}



# gpg-tar <COMMAND> <FILE> [ARGS...]
function gpg-tar {
_AR=$2
_DIR=${2/.txz.gpg}
_GPGD="gpg --quiet --decrypt"
_GPGE="gpg --encrypt --recipient hyve"
_TAR="tar --create --verbose --xz --file -"
_UNTAR="tar --extract --file -"

case $1 in
	encrypt)
		eval "$_TAR --cd $_DIR . | $_GPGE --output $_AR.txz.gpg";;
	decrypt)
		eval "mkdir $_DIR && $_GPGD $_AR | $_UNTAR --cd $_DIR"; rmdir $_DIR &> /dev/null;;
	add)
		shift; shift
		eval "$_GPGD $_AR | $_TAR @- $* | $_GPGE --output $_AR.new"
		sleep 0.5
		du -h $_AR $_AR.new
		echo -n "Replace archive? [yN] "
		read _COPY
		[ "$_COPY" = "y" ] && mv $_AR.new $_AR
		;;
	extract)
		[ $3 ] && eval "$_GPGD $_AR | $_UNTAR \"$3\"" || gpg-tar decrypt $_AR;;
	list)
		eval $_GPGD $_AR | tar --list --file - | sort;;
	repair)
		mv "$_AR"{,.old}; eval "$_GPGD $_AR.old | $_GPGE --output ${_AR/.old}";;
	*)
		echo "usage: $0 <command> <archive> [file]"
		echo
		echo "<commands>:"
		echo "  [{en,de}crypt|list|repair] <archive>"
		echo "  [add|extract] <archive> <file>"
esac
}



# wiki stuff
function wiki-commit {
git add .
_STAT=`git diff --cached --numstat | awk '{print $3":+"$1"-"$2; }'`
git ci -m "[$HOST] ${_STAT//\.wiki}"
}

function wiki {
[ -z $1 ] && echo 'usage: wiki $DIRECTORY' && return
[ -d $1 ] && cd $1 || return
git stash &> /dev/null
git pull
git stash pop &> /dev/null
vim index.wiki
wiki-commit
git push
cd -
}



# pdf compress <FILE>
function pdfcompress {
ghostscript -dCompatibilityLevel=1.4 -sDEVICE=pdfwrite -dNOPAUSE -dQUIET -dBATCH -sOutputFile=${1/.pdf/-small.pdf} $1
}



# scp two hop <FILE|USER@ORIGIN:PATH> <USER@JUMP_HOST> <FILE|USER@TARGET:PATH>
function scp2h {
[[ ( -z $1 || -z $2 || -z $3 ) ]] && echo 'usage: scp2h <FILE|USER@ORIGIN:PATH> <USER@JUMP_HOST> <FILE|USER@TARGET:PATH>' && return
scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ProxyCommand="ssh $2 nc %h %p" $1 $3
}



# scp tar <SRC> [SRC2...] <DST>
function scptar {
local SRC="ssh ${1/:*} \"tar cf - ${${@#*:}% *}\""
local DST="ssh \"${@[$#]/:*}\" \"tar xvf - -C ${@[$#]/*:}\""
if [ ! -e "$1" ]
then
	if [ ! -e "$@[$#]" ]
	then
		eval "$SRC | $DST"
	else
		eval "$SRC | tar xvf - -C $@[$#]"
	fi
else
	eval "tar cf - ${@:1:#-1} | $DST"
fi
}



# hyve <on|off>
function hyve
{
	case $1 in
		on) mkdir -m 777 ~/hyve; sshfs hyve: ~/hyve;;
		off) fusermount -u ~/hyve &> /dev/null || umount ~/hyve; rmdir ~/hyve;;
		"") [ -d ~/hyve ] && hyve off || hyve on;;
	esac
}
