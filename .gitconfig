[alias]
	# common shortcuts
	a = add
	b = branch
	bv = branch -vv
	ci = commit
	ca = commit --amend --no-edit
	co = checkout
	col = checkout # local branches switching with fzf alias
	cor = checkout # local/remote branch switching with fzf alias
	devs = shortlog --numbered --email --summary
	dir = rev-parse --show-toplevel
	push = push --force-with-lease
	s = status
	ss = status --long
	sub = submodule foreach git
	unstage = restore --staged
	untracked = ls-files --others

	# merge&rebase
	ma = merge --abort
	mc = merge --continue
	mq = merge --quit
	ra = rebase --abort
	rb = !git rebase -i $(git mb ${1} ${2})
	rc = rebase --continue
	re = rebase --edit-todo
	ri = rebase --interactive
	rs = rebase --skip

	# diffing
	d =   !git dc --no-prefix | sed -e '/^.\\[..mdiff --git /,/^.\\[..m---/d'               # shortest possible diff
	dc =  diff --minimal --unified=0 --word-diff=color                                      # common short diff base
	di =  !git dc --cached --no-prefix ${@} | sed -e '/^.\\[..mdiff --git /,/^.\\[..m---/d' # shortest possible staged diff
	dis = diff --stat --cached                                                              # staged stats
	dl =  !git dc --word-diff=plain                                                         # emphasize word diffs inline
	dm =  !git dc --color-moved=dimmed_zebra                                                # emphasize moves
	dp =  !git dc --word-diff=porcelain                                                     # emphasize word diffs
	ds =  diff --stat                                                                       # stats

	# log display
	l = log --graph --date-order
	la = !git l --all
	lf = !git l --full-history --simplify-merges
	lr = !git la --reflog
	ll = log --graph -n 1 --pretty=medium --date=iso

	# feature branch helpers
	db =  "!f() { git diff --minimal --unified=0 --word-diff=color $(git mb ${1} ${2}) ${3} ${4}; }; f"
	fm = !bash -c 'git show $(git rev-list $0...${1:-origin/HEAD} --ancestry-path --merges --reverse |& head -n1)' # find merge for given commit ($0) into given branch ($1 or origin/HEAD)
	lb = !sh -c '[ $0 = sh ] && BASE=origin/HEAD ";" git log --graph --date-order ${BASE:-$0}..HEAD ${1}'
	mb = "!f(){ git merge-base ${1:-HEAD} ${2:-origin/HEAD}; }; f" # get merge-base's SHA of branch (HEAD) towards base branch (origin/HEAD), i.e., where current branch was forked from given base branch

	# custom commands
	bc = !B=$(git branch --show-current) && git checkout origin/HEAD --quiet && git branch --verbose | awk '/\\[gone\\]/ {print $1}' | xargs --no-run-if-empty git branch --delete && git checkout --quiet ${B} # remove '[gone]' (fully merged) local branches
	bisect-first-parent-merges-only = !bash -c 'awk \"NR==FNR { m[\\$1]=1";"next } m[\\$1]!=1\" <(git rev-list --first-parent ${0:-HEAD..origin/HEAD}) <(git rev-list ${0:-HEAD..origin/HEAD}) | xargs git bisect skip'
	descend = !git rev-list --first-parent --topo-order --reverse ${1:-HEAD}..${2:-origin/HEAD} # find ancestry chain descendant commits from ($1 or HEAD) towards other commit ($2 or origin/HEAD), use '...| awk NR==<X>' to get the Xth descendant commit
	new = !git log --graph --date-order $(git rev-parse --abbrev-ref --symbolic-full-name '@{u}')..$(git rev-parse --abbrev-ref HEAD) # what's new on local branch (compared to upstream)
	upstream = !git log --graph --date-order $(git rev-parse --abbrev-ref HEAD)..$(git rev-parse --abbrev-ref --symbolic-full-name '@{u}') # what's new on upstream branch (compared to local)

[color "diff"]
	meta = yellow      # white not nice
	old = red bold     # bold ist better
	new = green bold   # bold ist better

[color "status"]
	added = green bold      # easier to spot
	changed = yellow bold   # easire to spot

[core]
	pager = less -FRSX   # less --quit-if-one-screen --RAW-CONTROL-CHARS --chop-long-lines --no-init

[diff]
	algorithm = histogram    # better diffing
	ignoreSubmodules = all   # don't diff into dependencies
	renames = copy           # {renames,copies}

[fetch]
	prune = true                # prune local branches (if deleted on remote)
	pruneTags = true            # prune local tags (if deleted on remote)
	recurseSubmodules = false   # avoid downloading dependencies
	#fsckobjects = false         # ignore 'badTimezone: invalid author/committer line - bad time zone', use with caution!

[format]
	pretty = tformat:%C(auto)%h%d %s %Cgreen(%ad) %C(bold blue)<%an>%Creset   # pretty says it all

[help]
	autocorrect = 10   # fix those pesky typos (in a second)

[log]
	abbrevCommit = true   # shorten SHA hashes
	date = human          # make dates readable

[merge]
	log = true       # list (20...) commit messages in merge
	tool = vimdiff   # vim all the way

[pull]
	ff = true

[push]
	default = upstream   # always push to set tracking branch
	followTags = true    # automagically update tags remotely

[rebase]
	stat = true                  # show nice diffstat
	autoSquash = true            # ... for fixup operations
	autoStash = true             # stash before starting
	missingCommitsCheck = warn   # show warning when removing commit

[rerere]
	autoUpdate = true   # apply automagic
	enabled = true      # pure automagic

[stash]
	showPatch = true   # no need to type '--patch'

[status]
	branch = true             # inform us, where we are
	short = true              # away with that pesky verbose help text
	submodulesummary = true   # show submodule changes

[transfer]
	fsckObjects = true   # always check object's hashes

[user]
	name = nilsonholger             # `whoami`
	email = nilsonholger@hyve.org   # finger `whoami`
